name: Create Release After Tag

on:
  workflow_run:
    workflows: ["Create Tag on Commit"]
    types:
      - completed
    branches:
      - main

jobs:
  create-release:
    # Only run if the tag workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Get commit details
        id: commit-details
        run: |
          echo "DEBUG: Workflow run information"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Workflow: ${{ github.event.workflow_run.workflow_id }}"
          echo "Status: ${{ github.event.workflow_run.conclusion }}"
          
          echo "Current git status:"
          git status
          
          echo "Available tags:"
          git tag -l
          
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          # Safely handle commit message by properly escaping it
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Use printf to ensure proper escaping of the commit message
          printf "commit_msg<<EOF\n%s\nEOF\n" "$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get-tag
        run: |
          set -e
          # Get the latest tag created by the auto-tag workflow
          git fetch --tags origin
          
          echo "All remote tags:"
          git ls-remote --tags origin
          
          # Check for the SHA that triggered this workflow
          TRIGGER_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Looking for tags pointing to commit SHA: $TRIGGER_SHA"
          
          # Get the most recent tag in the repository to use as a fallback
          echo "Finding the most recent tag in the repository..."
          RECENT_TAG=$(git tag -l "v*" | sort -V | tail -n 1 || echo "")
          echo "Most recent tag found: ${RECENT_TAG:-none}"
          
          # Set the tag to use for the release
          RELEASE_TAG="$RECENT_TAG"
          
          # Make sure we have a valid tag
          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: No valid tags found in the repository" >&2
            exit 1
          fi
          
          # Validate that the tag is in the correct format (vX.Y.Z)
          if ! echo "$RELEASE_TAG" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Tag '$RELEASE_TAG' is not in the expected format (vX.Y.Z)" >&2
            exit 1
          fi
          
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Found tag to use for release: $RELEASE_TAG"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get-tag.outputs.tag }}
          tag_name: ${{ steps.get-tag.outputs.tag }}
          body: |
            Automated release ${{ steps.get-tag.outputs.tag }}
            
            Commit SHA: ${{ steps.commit-details.outputs.sha_short }}
            Commit message: |
              ${{ steps.commit-details.outputs.commit_msg }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

